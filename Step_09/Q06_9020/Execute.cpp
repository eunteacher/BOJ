/*
문제
1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.

출력
각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.
*/
#include <iostream>
using namespace std;

bool FindPrime(int n)
{
	for (int i = 2; i * i <= n; i++)
	{
		if (n % i == 0)
			return false;
	}
	return true;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int N;
	cin >> N;

	for (int i = 0; i < N; i++)
	{
		int n; // 4 ~ 1000 짝수
		cin >> n;

		// n을 2로 나눈 값이 소수면 두 소수의 차가 0이므로 제일 작다.
		if (FindPrime(n / 2) == true)
		{
			cout << n / 2 << " " << n / 2 << '\n';
			continue;
		}

		// n을 2로 나눈 값이 소수가 아닐 경우
		for (int j = n / 2; j >= 2; j--) // 역순으로 도는 이유는 n / 2에 가장 가까운 소수가 가장 작은 차의 소수의 조합이고, 작은 수를 출력하기 위해 역순으로 돈다.
		{
			if (j % 2 == 0) // 짝수는 제외
				continue;

			if (FindPrime(j) == true && FindPrime(n - j) == true) // j가 소수이고, n - j가 소수라면 가장 작은 조합
			{
					cout << j << " " << n - j << '\n';
					break;
			}
		}
	}
	return 0;
}